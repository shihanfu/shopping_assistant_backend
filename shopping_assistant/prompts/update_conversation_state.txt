# Task
Extract and update conversation state from the ongoing shopping assistant conversation.

# Input
You will receive the recent conversation history between a user and a shopping assistant.

# Output Format
Return ONLY a valid JSON object with this exact structure (no additional text):

{
    "product_category": "string or null",
    "inferred_user_preferences": {
        "usage_scenario": "string or null",
        "budget": "string or null",
        "explicit_user_preferences": ["preference1", "preference2"],
        "implicit_user_preferences": ["inferred_preference1", "inferred_preference2"]
    },
    "inferred_product_attributes": {
        "dimension_name": "string describing the dimension (e.g., 'Visual Representation', 'Performance')",
        "attributes": [
            {
                "name": "attribute name (e.g., 'resolution', 'refresh_rate')",
                "value": "user preference or requirement (e.g., 'at least 1440p', 'high refresh rate')",
                "is_explicit": true
            }
        ]
    }
}

# Extraction Rules

## Product Category
- Extract the **main product type** being discussed (e.g., "jacket", "monitor", "laptop", "shoes")
- For "hiking jacket" → category is "jacket"
- For "gaming monitor" → category is "monitor"
- Use singular form
- Set to null if no clear category

## Inferred User Preferences
User preferences capture what the user **WANTS** or **NEEDS** in a product.

### Usage Scenario
- Extract the **primary use case** or context (e.g., "hiking", "gaming", "office work", "running", "photography")
- This answers "What will the user do with this product?"
- For "hiking jacket" → scenario is "hiking"
- For "gaming monitor" → scenario is "gaming"
- Set to null if not mentioned

### Budget
- Extract the **price range** explicitly mentioned by the user
- Examples: "under $100", "$50-$200", "around $500"
- Set to null if not mentioned

### Explicit User Preferences
List of preferences the user **directly stated**:
- Brand names (e.g., "ASUS brand")
- Specific requirements (e.g., "at least 1440p resolution", "144Hz or higher refresh rate")
- Must-have features (e.g., "waterproof", "lightweight")
- Format: Natural language strings describing each explicit preference

### Implicit User Preferences
List of preferences **inferred** from context:
- High-level needs implied by usage scenario (e.g., "high performance for gaming", "durability for hiking")
- Environmental or situational factors (e.g., "suitable for outdoor winter use", "low latency for competitive gaming")
- Format: Natural language strings describing each inferred preference

## Inferred Product Attributes
Product attributes capture user requirements and preferences organized by product dimensions.

### Dimension Name
- A category grouping related attributes (e.g., "Visual Representation", "Performance", "Weather Protection")
- Choose relevant dimensions based on the product category
- Keep dimension names consistent with examples below

### Attributes List
Each attribute object contains:
- **name**: The specific attribute (e.g., "resolution", "refresh_rate", "waterproof")
- **value**: User's requirement or preference (e.g., "at least 1440p", "high", "yes")
- **is_explicit**: `true` if user directly stated this, `false` if inferred from context

Examples:
- Explicit: User says "I need at least 144Hz" → `{"name": "refresh_rate", "value": "at least 144Hz", "is_explicit": true}`
- Implicit: User says "for gaming" → `{"name": "refresh_rate", "value": "high (120Hz+)", "is_explicit": false}`

## Dimension Examples by Category

**Jacket:**
- Weather Protection: waterproof, windproof, insulation, breathability
- Physical Properties: weight, size, fit, packability
- Design: color, style, pockets, hood

**Monitor:**
- Visual Representation: resolution, refresh_rate, color_accuracy, panel_type, color_gamut
- Physical Properties: size, weight, bezel, stand_adjustability
- Connectivity: hdmi_ports, displayport, usb_c, usb_hub
- Performance: response_time, input_lag, brightness, contrast_ratio

**Laptop:**
- Computing Power: cpu, ram, gpu
- Storage: ssd_size, ssd_type, additional_storage
- Display: resolution, size, panel_type, refresh_rate, brightness
- Physical Properties: weight, thickness, build_quality, battery_life
- Connectivity: ports, wifi, bluetooth

# Important Guidelines

## Extraction Rules
- Extract ONLY information explicitly stated or strongly implied in the conversation
- Clearly distinguish between:
  - Explicit (user directly said it) vs implicit (inferred from context)
  - Mark `is_explicit: true` only when user directly stated the requirement
  - Mark `is_explicit: false` for inferred requirements based on usage scenario or context
- Dimensions should be relevant to the current product category
- Set fields to null or empty arrays if no relevant information exists
- Maintain consistency across conversation turns
- Update if new information contradicts old information
- Return ONLY the JSON object, no explanatory text before or after

## User Preferences Format
- **Explicit preferences**: List of strings, each describing a directly stated requirement
  - Example: ["ASUS brand", "at least 1440p resolution", "budget under $500"]
  
- **Implicit preferences**: List of strings, each describing an inferred requirement
  - Example: ["high performance for gaming", "low response time for competitive play"]

## Product Attributes Format
- Organize attributes by dimension (choose ONE most relevant dimension per update)
- Each attribute has: name, value, is_explicit flag
- Value should describe user's requirement/preference, not specific product specs
- Example structure:
  ```json
  {
    "dimension_name": "Performance",
    "attributes": [
      {"name": "refresh_rate", "value": "at least 144Hz", "is_explicit": true},
      {"name": "response_time", "value": "low (for gaming)", "is_explicit": false}
    ]
  }
  ```

## Inference Guidelines
- **Gaming** scenario → infer implicit requirements:
  - Performance: high refresh_rate, low response_time, low input_lag
  - Visual: good color_accuracy (for competitive), high resolution
  
- **Hiking/Outdoor** scenario → infer implicit requirements:
  - Weather Protection: waterproof, windproof, breathable
  - Physical Properties: lightweight, packable, durable
  
- **Professional/Work** scenario → infer implicit requirements:
  - Performance: reliable, good ergonomics
  - Physical Properties: good build_quality
  
- **Budget-conscious** language → infer priority on value/price in usage_context

## Example Extraction

**Conversation**: "I'm looking for a gaming monitor under $500. I need at least 1440p resolution."

```json
{
  "product_category": "monitor",
  "inferred_user_preferences": {
    "usage_scenario": "gaming",
    "budget": "under $500",
    "explicit_user_preferences": [
      "at least 1440p resolution"
    ],
    "implicit_user_preferences": [
      "high performance for gaming",
      "fast response for competitive play"
    ]
  },
  "inferred_product_attributes": {
    "dimension_name": "Visual Representation",
    "attributes": [
      {
        "name": "resolution",
        "value": "at least 1440p",
        "is_explicit": true
      },
      {
        "name": "refresh_rate",
        "value": "high (120Hz+)",
        "is_explicit": false
      }
    ]
  }
}
```

**Conversation continues**: "I prefer ASUS brand and need low response time for FPS games."

```json
{
  "product_category": "monitor",
  "inferred_user_preferences": {
    "usage_scenario": "gaming",
    "budget": "under $500",
    "explicit_user_preferences": [
      "at least 1440p resolution",
      "ASUS brand",
      "low response time for FPS games"
    ],
    "implicit_user_preferences": [
      "high performance for gaming",
      "fast response for competitive play",
      "low input lag for FPS games"
    ]
  },
  "inferred_product_attributes": {
    "dimension_name": "Performance",
    "attributes": [
      {
        "name": "response_time",
        "value": "low (1ms preferred)",
        "is_explicit": true
      },
      {
        "name": "input_lag",
        "value": "minimal",
        "is_explicit": false
      }
    ]
  }
}
```
